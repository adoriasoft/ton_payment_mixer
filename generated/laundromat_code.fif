"Asm.fif" include
// automatically generated from `../smartcont/stdlib.fc` `../laundromat/src/RSA.fc` `../laundromat/src/ring_sign.fc` `../laundromat/src/laundromat.fc` 
PROGRAM{
  DECLPROC mulmod
  DECLPROC gcd
  DECLPROC inverse_el
  DECLPROC modexp
  DECLPROC generating_keys
  DECLPROC encrypt
  DECLPROC decrypt
  DECLPROC find_min
  DECLPROC sign_message
  DECLPROC check_sign
  DECLPROC Op::check_sign
  DECLPROC Ok
  DECLPROC Fail
  DECLPROC send_message
  DECLPROC load_data
  DECLPROC store_data
  DECLPROC if_exist
  DECLPROC recv_internal
  DECLPROC recv_external
  118881 DECLMETHOD get_public_keys_array
  mulmod PROC:<{
    MULDIVMOD
    NIP
  }>
  gcd PROC:<{
    OVER
    0 EQINT
    IFJMP:<{
      2DROP
      0 PUSHINT
      1 PUSHINT
    }>
    s0 s1 PUSH2
    MOD
    s2 PUSH
    gcd CALLDICT
    s2 s3 XCHG2
    DIV
    OVER
    MUL
    s1 s2 XCHG
    SUB
    SWAP
  }>
  inverse_el PROC:<{
    TUCK
    gcd CALLDICT
    DROP
    SWAP
    MOD
  }>
  modexp PROC:<{
    OVER
    0 EQINT
    IFJMP:<{
      3 BLKDROP
      1 PUSHINT
    }>
    1 PUSHINT
    WHILE:<{
      s2 PUSH
      0 NEQINT
    }>DO<{
      s2 PUSH
      1 PUSHINT
      AND
      1 EQINT
      IF:<{
        s3 s1 PUSH2
        mulmod CALLDICT
      }>
      s3 s0 s1 XCPU2
      mulmod CALLDICT
      s0 s2 XCHG
      1 RSHIFT#
      s0 s1 s3 XCHG3
    }>
    s0 s3 XCHG
    3 BLKDROP
  }>
  generating_keys PROC:<{
    2DUP
    MUL
    s0 s2 XCHG
    DEC
    SWAP
    DEC
    MUL
    DUP
    DEC
    s0 s1 PUXC
    inverse_el CALLDICT
    s0 s2 XCHG
  }>
  encrypt PROC:<{
    modexp CALLDICT
  }>
  decrypt PROC:<{
    modexp CALLDICT
  }>
  find_min PROC:<{
    0 PUSHINT
    s2 PUSH
    32 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    DROP
    1 PUSHINT
    s3 PUSH
    32 PUSHINT
    DICTUGET
    NULLSWAPIFNOT
    DROP
    SWAP
    8 PUSHPOW2
    SDSKIPFIRST
    256 PLDU
    SWAP
    8 PUSHPOW2
    SDSKIPFIRST
    256 PLDU
    MIN
    2 PUSHINT
    s0 s2 XCHG
    -2 ADDCONST
    REPEAT:<{
      s1 s2 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DROP
      8 PUSHPOW2
      SDSKIPFIRST
      256 PLDU
      MIN
      SWAP
      INC
      SWAP
    }>
    NIP
    NIP
  }>
  sign_message PROC:<{
    s6 s5 PUSH2
    find_min CALLDICT
    s4 s5 PUXC
    SUB
    s5 PUSH
    MOD
    NEWDICT
    0 PUSHINT
    s0 s8 PUXC
    REPEAT:<{
      s0 s9 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DROP
      256 LDU
      s6 s1 PUSH2
      NEQ
      IF:<{
        256 PLDU
        DUP
        -2 ADDCONST
        s0 s1 PUXC
        s1 s3 XCHG
        encrypt CALLDICT
        s1 s4 XCHG
        SUB
        s8 PUSH
        MOD
        NEWC
        s1 s4 XCHG
        256 STU
        ENDC
        CTOS
        SWAP
        32 PUSHINT
        s1 s3 s3 PUXC2
        DICTUSET
      }>ELSE<{
        2DROP
        s8 POP
        s7 s(-1) PUXC
      }>
      SWAP
      INC
    }>
    DROP
    s3 POP
    s7 POP
    s6 s3 XCHG2
    SUB
    s0 s3 XCHG2
    MOD
    -ROT
    decrypt CALLDICT
    NEWC
    256 STU
    ENDC
    CTOS
    s0 s2 XCHG
    32 PUSHINT
    DICTUSET
  }>
  check_sign PROC:<{
    s4 s2 PUSH2
    find_min CALLDICT
    s1 s2 PUXC
    ADD
    s2 PUSH
    MOD
    0 PUSHINT
    s0 s4 XCHG
    REPEAT:<{
      s3 s5 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DROP
      256 LDU
      256 PLDU
      s5 s6 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DROP
      256 PLDU
      -ROT
      encrypt CALLDICT
      ADD
      s2 PUSH
      MOD
      s0 s3 XCHG
      INC
      s0 s3 XCHG
    }>
    s3 POP
    s3 POP
    s3 POP
    s0 s2 XCHG
    MOD
    EQUAL
    IFJMP:<{
      1 PUSHINT
    }>
    0 PUSHINT
  }>
  Op::check_sign PROC:<{
    1 PUSHINT
  }>
  Ok PROC:<{
    0 PUSHINT
  }>
  Fail PROC:<{
    1 PUSHINT
  }>
  send_message PROC:<{
    0 PUSHINT
    24 PUSHINT
    NEWC
    6 STU
    s0 s7 XCHG2
    STSLICER
    ROT
    STGRAMS
    s1 s5 XCHG
    107 STU
    s1 s3 XCHG
    32 STU
    64 STU
    OVER
    -1 GTINT
    IF:<{
      32 STU
    }>ELSE<{
      NIP
    }>
    ENDC
    SWAP
    SENDRAWMSG
  }>
  load_data PROC:<{
    c4 PUSH
    CTOS
    32 LDU
    64 LDU
    8 LDU
    8 LDU
    8 LDU
    LDGRAMS
    LDDICT
    LDDICT
    ENDS
  }>
  store_data PROC:<{
    1 PUSHINT
    NEWC
    s1 s8 XCHG
    32 STU
    s1 s6 XCHG
    64 STU
    s1 s6 XCHG
    8 STU
    8 STU
    s1 s3 XCHG
    8 STU
    s0 s3 XCHG2
    STGRAMS
    s1 s2 XCHG
    STDICT
    STDICT
    ENDC
    c4 POP
  }>
  if_exist PROC:<{
    0 PUSHINT
    DUP
    -1 PUSHINT
    s0 s4 XCHG
    REPEAT:<{
      s1 s4 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DROP
      LDMSGADDR
      DROP
      s3 PUSH
      REWRITESTDADDR
      NIP
      SWAP
      REWRITESTDADDR
      NIP
      EQUAL
      IF:<{
        DROP
        s2 POP
        1 PUSHINT
        s2 PUSH
      }>ELSE<{
        s0 s3 XCHG2
      }>
      s0 s3 XCHG
      INC
      SWAP
    }>
    NIP
    NIP
    s2 POP
  }>
  recv_internal PROC:<{
    s2 POP
    OVER
    SEMPTY
    IFJMP:<{
      2DROP
    }>
    CTOS
    4 LDU
    s0 s2 XCHG
    8 LDU
    s0 s2 XCHG
    1 PUSHINT
    AND
    IFJMP:<{
      3 BLKDROP
    }>
    SWAP
    64 LDU
    s0 s3 XCHG
    LDMSGADDR
    DROP
    load_data CALLDICT
    s3 POP
    s4 POP
    s5 s4 PUSH2
    MUL
    s1 s(-1) PUXC
    GREATER
    IF:<{
      s2 POP
      1 PUSHINT
    }>ELSE<{
      s0 s2 XCHG
    }>
    DUP
    0 EQINT
    IFJMP:<{
      s8 POP
      s8 POP
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s7 s6 s0 XCHG3
      0 PUSHINT
      store_data CALLDICT
      Fail CALLDICT
      1 PUSHINT
      0 PUSHINT
      DUP
      s3 s4 XCHG
      send_message CALLDICT
    }>
    Op::check_sign CALLDICT
    s1 s9 XCHG
    EQUAL
    IFJMP:<{
      s0 s4 s5 PUSH3
      if_exist CALLDICT
      SWAP
      0 EQINT
      IFJMP:<{
        DROP
        s8 POP
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s7 s6 s0 XCHG3
        0 PUSHINT
        store_data CALLDICT
        Fail CALLDICT
        1 PUSHINT
        0 PUSHINT
        DUP
        s3 s4 XCHG
        send_message CALLDICT
      }>
      s0 s1 PUSH2
      32 PUSHINT
      DICTUGET
      NULLSWAPIFNOT
      DROP
      LDMSGADDR
      NIP
      8 LDU
      ENDS
      IFJMP:<{
        DROP
        s8 POP
        s3 s5 XCHG
        s4 s3 s0 XCHG3
        s7 s6 s0 XCHG3
        0 PUSHINT
        store_data CALLDICT
        Fail CALLDICT
        1 PUSHINT
        0 PUSHINT
        DUP
        s3 s4 XCHG
        send_message CALLDICT
      }>
      s0 s9 XCHG
      LDMSGADDR
      LDDICT
      256 LDU
      256 LDU
      DROP
      s6 PUSH
      s3 s1 s3 XCHG3
      s9 s(-1) s(-1) PUXC2
      check_sign CALLDICT
      IFJMP:<{
        1 PUSHINT
        NEWC
        s0 s8 XCHG2
        STSLICER
        s1 s7 XCHG
        8 STU
        ENDC
        CTOS
        s0 s9 s9 XCHG3
        32 PUSHINT
        DICTUSET
        s3 s4 XCHG
        1 PUSHINT
        s3 PUSH
        s0 s5 XCHG
        s3 s4 XCHG
        s2 s3 XCHG
        s8 s9 s9 XCHG3
        store_data CALLDICT
        Ok CALLDICT
        1 PUSHINT
        s0 s3 XCHG2
        0 PUSHINT
        send_message CALLDICT
      }>
      DROP
      s8 POP
      s3 s5 XCHG
      s4 s3 s0 XCHG3
      s7 s6 s0 XCHG3
      0 PUSHINT
      store_data CALLDICT
      Fail CALLDICT
      1 PUSHINT
      0 PUSHINT
      DUP
      s3 s4 XCHG
      send_message CALLDICT
    }>
    9 BLKDROP
  }>
  recv_external PROC:<{
    DROP
    load_data CALLDICT
    s3 POP
    s0 s4 XCHG
    33 THROWIF
    ACCEPT
    s1 s2 XCHG
    1 PUSHINT
    store_data CALLDICT
  }>
  get_public_keys_array PROC:<{
    load_data CALLDICT
    s1 s6 XCHG
    6 BLKDROP
    SWAP
  }>
}END>c
